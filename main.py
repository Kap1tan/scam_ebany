import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
import os
import re
import json
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
BOT_TOKEN = ""

# –ö–æ—à–µ–ª–µ–∫ –≥–∞—Ä–∞–Ω—Ç–∞ (–±–æ—Ç–∞) - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô
GUARANTOR_WALLET = "UQBcHj1SItr8Pa_TQ1dxhZLCSnI9p9gjnTqPyeAWOzyISmcF"
# –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∞ –¥–ª—è —Ä—É–±–ª–µ–π
GUARANTOR_BANK_CARD = "2200 1529 2777 7964"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID), —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
PRIVILEGED_USERS = [
    7206760804,
    1278132083
]

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
TEXTS = {
    'ru': {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\nüíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!\n–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\nüõ°Ô∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç:**\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ—à–µ–ª–µ–∫/–∫–∞—Ä—Ç—É –≥–∞—Ä–∞–Ω—Ç–∞\n‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É\n\nüîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TON –∏ RUB\nüîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:',
        'wallet_btn': 'ü™ô –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
        'create_deal_btn': 'üìÉ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É',
        'referral_btn': '‚õìÔ∏è‚Äçüí• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
        'language_btn': 'üåê Change Language',
        'support_btn': 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        'choose_language': 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'back_to_menu': 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'
    },
    'en': {
        'welcome': 'Welcome to ELF OTC ‚Äì reliable P2P guarantor\n\nüíº Buy and sell anything safely!\nFrom Telegram gifts and NFTs to tokens and fiat ‚Äì deals go smoothly and risk-free.\n\nüõ°Ô∏è **How guarantor works:**\n‚Ä¢ Buyer sends to guarantor wallet/card\n‚Ä¢ Seller ships item to buyer\n‚Ä¢ Guarantor sends money to seller\n\nüîπ Convenient wallet management\nüîπ TON and RUB support\nüîπ Referral system\n\nChoose the section you need below:',
        'wallet_btn': 'ü™ô Add/change payment details',
        'create_deal_btn': 'üìÉ Create deal',
        'referral_btn': '‚õìÔ∏è‚Äçüí• Referral link',
        'language_btn': 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
        'support_btn': 'üìû Support',
        'choose_language': 'üåê Choose language:',
        'back_to_menu': 'üîô Back to menu'
    }
}

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
START_IMAGE_PATH = "start.jpg"  # –∏–ª–∏ "start.png" - –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–¥–µ–ª–æ–∫
DEALS_DATA_FILE = "deals_data.json"


class ELFOTCBot:
    def __init__(self):
        self.user_languages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_wallets = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è TON-–∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_bank_cards = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.deals = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        self.load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_deals_data()

    def load_user_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(USER_DATA_FILE):
                with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    self.user_languages = data.get('languages', {})
                    self.user_wallets = data.get('wallets', {})
                    self.user_bank_cards = data.get('bank_cards', {})
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(self.user_languages)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.user_languages = {}
            self.user_wallets = {}
            self.user_bank_cards = {}

    def save_user_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            data = {
                'languages': self.user_languages,
                'wallets': self.user_wallets,
                'bank_cards': self.user_bank_cards
            }
            with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
                json.dump(data, file, ensure_ascii=False, indent=2)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_user_wallet(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_wallets.get(str(user_id))

    def set_user_wallet(self, user_id, wallet):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        self.user_wallets[str(user_id)] = wallet
        self.save_user_data()

    def get_user_bank_card(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_bank_cards.get(str(user_id))

    def set_user_bank_card(self, user_id, card):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        self.user_bank_cards[str(user_id)] = card
        self.save_user_data()

    def get_user_language(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)"""
        return self.user_languages.get(str(user_id), 'ru')

    def set_user_language(self, user_id, language):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        self.user_languages[str(user_id)] = language
        self.save_user_data()

    async def safe_edit_message(self, query, text, reply_markup=None, parse_mode=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑)"""
        try:
            if query.message.photo:
                await query.edit_message_caption(
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                await query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.error(f"Error in safe_edit_message: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

    def get_main_keyboard(self, user_id):
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        lang = self.get_user_language(user_id)
        texts = TEXTS[lang]

        keyboard = [
            [InlineKeyboardButton(texts['wallet_btn'], callback_data='wallet')],
            [InlineKeyboardButton(texts['create_deal_btn'], callback_data='create_deal')],
            [InlineKeyboardButton(texts['referral_btn'], callback_data='referral')],
            [InlineKeyboardButton(texts['language_btn'], callback_data='change_language')],
            [InlineKeyboardButton(texts['support_btn'], url='https://t.me/OTC_ELF_HELPER')]
        ]

        return InlineKeyboardMarkup(keyboard)

    def get_language_keyboard(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        lang = self.get_user_language(user_id)
        texts = TEXTS[lang]

        keyboard = [
            [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='lang_ru')],
            [InlineKeyboardButton('üá∫üá∏ English', callback_data='lang_en')],
            [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_currency_keyboard(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
        lang = self.get_user_language(user_id)
        texts = TEXTS[lang]

        keyboard = [
            [InlineKeyboardButton('üíé TON', callback_data='currency_ton')],
            [InlineKeyboardButton('üí≥ RUB (–†—É–±–ª–∏)', callback_data='currency_rub')],
            [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_deal_card(self, deal, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å–¥–µ–ª–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        seller_id = deal['user_id']
        buyer_id = deal.get('buyer_id')
        is_seller = str(user_id) == str(seller_id)
        is_buyer = str(user_id) == str(buyer_id)
        seller_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{seller_id}"
        buyer_status = ""
        status = deal.get('status', 'active')
        currency = deal.get('currency', 'TON')

        card = f"üíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal['id'][:8]}\n\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_buyer:
            buyer_status = "üü¢ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ."
        elif is_seller:
            buyer_status = "üü¢ –í—ã –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ —Å–¥–µ–ª–∫–µ."
        else:
            buyer_status = "üîí –û–∂–∏–¥–∞–Ω–∏–µ"

        card += f"{buyer_status}\n"
        card += f"üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if buyer_id:
            if currency == 'TON':
                buyer_wallet = self.get_user_wallet(buyer_id)
                card += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{buyer_id}\n"
                if buyer_wallet:
                    card += f"üí≥ TON-–∫–æ—à–µ–ª–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{buyer_wallet}`\n"
            else:  # RUB
                buyer_card = self.get_user_bank_card(buyer_id)
                card += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{buyer_id}\n"
                if buyer_card:
                    card += f"üí≥ –ö–∞—Ä—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{buyer_card}`\n"

        card += f"üì¶ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal['description']}\n\n"

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–∞—Ä–∞–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        card += f"üõ°Ô∏è –°–•–ï–ú–ê –ì–ê–†–ê–ù–¢–ò–ò ({currency}):\n"

        if currency == 'TON':
            card += f"üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ì–ê–†–ê–ù–¢): `{GUARANTOR_WALLET}`\n"
            card += f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {deal['amount']} TON\n"
            card += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (memo): {deal['id'][:8]}\n\n"
        else:  # RUB
            card += f"üí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ì–ê–†–ê–ù–¢): `{GUARANTOR_BANK_CARD}`\n"
            card += f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {deal['amount']} ‚ÇΩ\n"
            card += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {deal['id'][:8]}\n\n"

        card += "‚ö†Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å:\n"
        if currency == 'TON':
            card += "1Ô∏è‚É£ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç TON –ù–ê –ö–û–®–ï–õ–ï–ö –ì–ê–†–ê–ù–¢–ê(–ë–æ—Ç–∞)\n"
        else:
            card += "1Ô∏è‚É£ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É–±–ª–∏ –ù–ê –ö–ê–†–¢–£ –ì–ê–†–ê–ù–¢–ê(–ë–æ—Ç–∞)\n"
        card += "2Ô∏è‚É£ –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n"
        if currency == 'TON':
            card += "3Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç TON –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–∞ –µ–≥–æ –∫–æ—à–µ–ª–µ–∫\n\n"
        else:
            card += "3Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É–±–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–∞ –µ–≥–æ –∫–∞—Ä—Ç—É\n\n"

        card += "üîí –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –≥–∞—Ä–∞–Ω—Ç–∞!\n"

        # –°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–∫–∏
        if status == 'active' and buyer_id:
            if currency == 'TON':
                card += "\nüí° –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ TON –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ì–ê–†–ê–ù–¢–ê(–ë–æ—Ç–∞) –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª'."
            else:
                card += "\nüí° –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É –ì–ê–†–ê–ù–¢–ê(–ë–æ—Ç–∞) –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª'."
        elif status == 'waiting_confirmation':
            if currency == 'TON':
                card += "\n‚è≥ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ TON –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫..."
            else:
                card += "\n‚è≥ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä—É–±–ª–µ–π –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç—É..."
        elif status == 'payment_confirmed':
            if is_seller:
                card += "\n‚úÖ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\nüì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.\nüí∞ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã."
            else:
                card += "\n‚úÖ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\nüì¶ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞."
        elif status == 'finished':
            if is_seller:
                card += "\nüéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            else:
                card += "\nüéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å–∞!"

        return card

    async def get_user_info(self, context, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = await context.bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            return f"{user.first_name} {user.last_name or ''} ({username})".strip()
        except:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        lang = self.get_user_language(user_id)
        texts = TEXTS[lang]
        args = context.args if hasattr(context, 'args') else []

        if args and args[0].startswith('deal_'):
            deal_id = args[0][5:]
            deal = self.get_deal(deal_id)
            if deal:
                card = self.get_deal_card(deal, user_id)
                keyboard = []
                status = deal.get('status', 'active')

                if str(user_id) == str(deal['user_id']):
                    # –ü—Ä–æ–¥–∞–≤–µ—Ü
                    if status == 'payment_confirmed':
                        keyboard.append(
                            [InlineKeyboardButton('üì¶ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä', callback_data=f'seller_sent_{deal_id}')])
                    keyboard.append([InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_deal_{deal_id}')])
                elif deal.get('buyer_id') is None:
                    # –ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
                    keyboard.append([InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data=f'accept_deal_{deal_id}')])
                elif str(user_id) == str(deal.get('buyer_id')):
                    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
                    if status == 'active':
                        keyboard.append([InlineKeyboardButton('üí∏ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª', callback_data=f'buyer_paid_{deal_id}')])
                    keyboard.append([InlineKeyboardButton('‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏', callback_data=f'cancel_deal_{deal_id}')])

                await update.message.reply_text(card, reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
                                                parse_mode=ParseMode.MARKDOWN)
                return
            else:
                await update.message.reply_text('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            if os.path.exists(START_IMAGE_PATH):
                with open(START_IMAGE_PATH, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=texts['welcome'],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self.get_main_keyboard(user_id)
                    )
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    texts['welcome'],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=self.get_main_keyboard(user_id)
                )
                logger.warning(f"Image {START_IMAGE_PATH} not found")
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text(
                texts['welcome'],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self.get_main_keyboard(user_id)
            )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        data = query.data

        if data == 'change_language':
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            try:
                if os.path.exists(START_IMAGE_PATH):
                    with open(START_IMAGE_PATH, 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(photo),
                            reply_markup=self.get_language_keyboard(user_id)
                        )
                        await query.edit_message_caption(
                            caption=texts['choose_language'],
                            reply_markup=self.get_language_keyboard(user_id)
                        )
                else:
                    await query.edit_message_text(
                        text=texts['choose_language'],
                        reply_markup=self.get_language_keyboard(user_id)
                    )
            except Exception as e:
                logger.error(f"Error in change_language: {e}")
                await query.edit_message_text(
                    text=texts['choose_language'],
                    reply_markup=self.get_language_keyboard(user_id)
                )

        elif data.startswith('lang_'):
            # –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
            new_lang = data.split('_')[1]
            self.set_user_language(user_id, new_lang)

            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            texts = TEXTS[new_lang]

            try:
                if os.path.exists(START_IMAGE_PATH):
                    with open(START_IMAGE_PATH, 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(photo),
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                        await query.edit_message_caption(
                            caption=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                else:
                    await query.edit_message_text(
                        text=texts['welcome'],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self.get_main_keyboard(user_id)
                    )
            except Exception as e:
                logger.error(f"Error in language change: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                try:
                    if query.message.photo:
                        await query.edit_message_caption(
                            caption=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                    else:
                        await query.edit_message_text(
                            text=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                except Exception as e2:
                    logger.error(f"Critical error in language change: {e2}")

        elif data == 'back_to_menu':
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            try:
                if os.path.exists(START_IMAGE_PATH):
                    with open(START_IMAGE_PATH, 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(photo),
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                        await query.edit_message_caption(
                            caption=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                else:
                    await query.edit_message_text(
                        text=texts['welcome'],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self.get_main_keyboard(user_id)
                    )
            except Exception as e:
                logger.error(f"Error in back_to_menu: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                try:
                    if query.message.photo:
                        await query.edit_message_caption(
                            caption=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                    else:
                        await query.edit_message_text(
                            text=texts['welcome'],
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_main_keyboard(user_id)
                        )
                except Exception as e2:
                    logger.error(f"Critical error in back_to_menu: {e2}")

        elif data == 'wallet':
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_wallet = self.get_user_wallet(user_id)
            current_card = self.get_user_bank_card(user_id)

            wallet_text = 'üì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n'

            if current_wallet:
                wallet_text += f'üíé –í–∞—à TON-–∫–æ—à–µ–ª–µ–∫:\n`{current_wallet}`\n\n'
            else:
                wallet_text += 'üíé TON-–∫–æ—à–µ–ª–µ–∫: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n\n'

            if current_card:
                wallet_text += f'üí≥ –í–∞—à–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:\n`{current_card}`\n\n'
            else:
                wallet_text += 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n'

            wallet_text += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüëá'

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton('üíé –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫', callback_data='add_ton_wallet')],
                [InlineKeyboardButton('üí≥ –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É', callback_data='add_bank_card')],
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ])

            await self.safe_edit_message(query, wallet_text, keyboard, ParseMode.MARKDOWN)

        elif data == 'create_deal':
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            deal_text = 'üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\nüõ°Ô∏è –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ì–ê–†–ê–ù–¢:\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Üí –ö–æ—à–µ–ª–µ–∫/–∫–∞—Ä—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∞(–ë–æ—Ç–∞)\n‚Ä¢ –í—ã ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–æ–≤–∞—Ä\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏\n\nüí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:'
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton('üíé TON', callback_data='create_deal_ton')],
                [InlineKeyboardButton('üí≥ RUB (–†—É–±–ª–∏)', callback_data='create_deal_rub')],
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ])

            await self.safe_edit_message(query, deal_text, keyboard)

        elif data == 'referral':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            user_id = query.from_user.id
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            referral_text = f"""üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:

https://t.me/Gift_Elif_Robot?start=ref_{user_id}

üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0.0 TON/RUB
üìä 40% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–æ—Ç–∞"""

            try:
                if os.path.exists(START_IMAGE_PATH):
                    with open(START_IMAGE_PATH, 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(photo),
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')
                            ]])
                        )
                        await query.edit_message_caption(
                            caption=referral_text,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')
                            ]])
                        )
                else:
                    await query.edit_message_text(
                        text=referral_text,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')
                        ]])
                    )
            except Exception as e:
                logger.error(f"Error in referral: {e}")
                try:
                    if query.message.photo:
                        await query.edit_message_caption(
                            caption=referral_text,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')
                            ]])
                        )
                    else:
                        await query.edit_message_text(
                            text=referral_text,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')
                            ]])
                        )
                except Exception as e2:
                    logger.error(f"Critical error in referral: {e2}")

        elif data == 'add_ton_wallet':
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_wallet = self.get_user_wallet(user_id)

            if current_wallet:
                ton_text = (
                    f'üíé –ò–∑–º–µ–Ω–µ–Ω–∏–µ TON-–∫–æ—à–µ–ª—å–∫–∞\n\n'
                    f'–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:\n`{current_wallet}`\n\n'
                    f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:'
                )
            else:
                ton_text = 'üíé –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª–µ–∫:\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è TON-–∫–æ—à–µ–ª—å–∫–∞
            self.user_states[user_id] = 'waiting_ton_wallet'

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ])

            await self.safe_edit_message(query, ton_text, keyboard, ParseMode.MARKDOWN)

        elif data == 'add_bank_card':
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_card = self.get_user_bank_card(user_id)

            if current_card:
                card_text = (
                    f'üí≥ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã\n\n'
                    f'–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:\n`{current_card}`\n\n'
                    f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:'
                )
            else:
                card_text = 'üí≥ –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É:\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä)\n–ü—Ä–∏–º–µ—Ä: 2200 7000 0000 0000'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
            self.user_states[user_id] = 'waiting_bank_card'

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ])

            await self.safe_edit_message(query, card_text, keyboard, ParseMode.MARKDOWN)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        elif data.startswith('create_deal_'):
            currency = data.split('_')[2].upper()
            lang = self.get_user_language(user_id)
            texts = TEXTS[lang]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
            if currency == 'TON':
                seller_payment_method = self.get_user_wallet(user_id)
                method_name = "TON-–∫–æ—à–µ–ª–µ–∫"
                currency_symbol = "TON"
            else:  # RUB
                seller_payment_method = self.get_user_bank_card(user_id)
                method_name = "–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É"
                currency_symbol = "‚ÇΩ"

            if not seller_payment_method:
                error_text = f"‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ {currency} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å {method_name}!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã' –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton('ü™ô –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='wallet'),
                    InlineKeyboardButton('üîô –í –º–µ–Ω—é', callback_data='back_to_menu')
                ]])

                await self.safe_edit_message(query, error_text, keyboard)
                return

            # –ï—Å–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –µ—Å—Ç—å, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É
            self.user_states[user_id] = {'waiting_deal_amount': True, 'currency': currency}
            deal_text = f'üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ {currency}\n\nüõ°Ô∏è –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ì–ê–†–ê–ù–¢:\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Üí –ü–µ—Ä–µ–≤–æ–¥–∏—Ç {currency_symbol} –≥–∞—Ä–∞–Ω—Ç—É\n‚Ä¢ –í—ã ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–æ–≤–∞—Ä\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç(–ë–æ—Ç) ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–º {currency_symbol}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.5):'
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ])

            await self.safe_edit_message(query, deal_text, keyboard)

        # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É)
        elif data.startswith('currency_'):
            currency = data.split('_')[1].upper()
            state = self.user_states.get(user_id)

            if isinstance(state, dict) and 'deal_amount' in state:
                state['currency'] = currency
                self.user_states[user_id] = state

                amount = state['deal_amount']
                currency_symbol = 'TON' if currency == 'TON' else '‚ÇΩ'

                ask_desc = f'üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {amount} {currency_symbol}:\n\nüí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç {amount} {currency_symbol} –≥–∞—Ä–∞–Ω—Ç—É\n‚Ä¢ –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç {amount} {currency_symbol} –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n–ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è: 10 –ö–µ–ø–æ–∫ –∏ –ü–µ–ø–µ'
                await self.safe_edit_message(query, ask_desc)

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–Ω—è—Ç–∏–µ —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ
        if data.startswith('accept_deal_'):
            deal_id = data[len('accept_deal_'):]
            deal = self.get_deal(deal_id)
            if not deal:
                await self.safe_edit_message(query, '‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü
            if str(user_id) == str(deal['user_id']):
                await self.safe_edit_message(query, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞
            if deal.get('buyer_id') is not None:
                card = self.get_deal_card(deal, user_id)
                await self.safe_edit_message(query, card, parse_mode=ParseMode.MARKDOWN)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            currency = deal.get('currency', 'TON')

            if currency == 'TON':
                buyer_payment_method = self.get_user_wallet(user_id)
                method_name = "TON-–∫–æ—à–µ–ª–µ–∫"
            else:  # RUB
                buyer_payment_method = self.get_user_bank_card(user_id)
                method_name = "–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É"

            if not buyer_payment_method:
                error_text = f"‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å {method_name}!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã' –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton('ü™ô –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='wallet'),
                    InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
                ]])

                await self.safe_edit_message(query, error_text, keyboard)
                return

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏
            deal['buyer_id'] = str(user_id)
            deal['status'] = 'active'
            self.deals[deal_id] = deal
            self.save_deals_data()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
            buyer_info = await self.get_user_info(context, user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
            card = self.get_deal_card(deal, user_id)
            keyboard = [
                [InlineKeyboardButton('üí∏ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª', callback_data=f'buyer_paid_{deal_id}')],
                [InlineKeyboardButton('‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏', callback_data=f'cancel_deal_{deal_id}')]
            ]
            await self.safe_edit_message(query, card, InlineKeyboardMarkup(keyboard), ParseMode.MARKDOWN)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
            seller_id = deal['user_id']
            try:
                currency_symbol = 'TON' if currency == 'TON' else '‚ÇΩ'
                seller_notification = f"""üîî –í –≤–∞—à—É —Å–¥–µ–ª–∫—É #{deal['id'][:8]} –∑–∞—à–µ–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_info}
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{buyer_payment_method}`
üì¶ –¢–æ–≤–∞—Ä: {deal['description']}
üí∞ –°—É–º–º–∞: {deal['amount']} {currency_symbol}

–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""

                await context.bot.send_message(chat_id=seller_id, text=seller_notification,
                                               parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}')
            return

        # –ò–ó–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê: –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª"
        if data.startswith('buyer_paid_'):
            deal_id = data[len('buyer_paid_'):]
            deal = self.get_deal(deal_id)
            if not deal or str(user_id) != str(deal.get('buyer_id')):
                await self.safe_edit_message(query, '‚ùå –û—à–∏–±–∫–∞. –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            if user_id in PRIVILEGED_USERS:
                # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                deal['status'] = 'payment_confirmed'
                self.deals[deal_id] = deal
                self.save_deals_data()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                card = self.get_deal_card(deal, user_id)
                await self.safe_edit_message(query, card, parse_mode=ParseMode.MARKDOWN)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                seller_id = deal.get('user_id')
                currency = deal.get('currency', 'TON')

                if currency == 'TON':
                    buyer_payment_method = self.get_user_wallet(user_id)
                    seller_payment_method = self.get_user_wallet(seller_id)
                    currency_symbol = 'TON'
                    payment_type = "TON"
                else:
                    buyer_payment_method = self.get_user_bank_card(user_id)
                    seller_payment_method = self.get_user_bank_card(seller_id)
                    currency_symbol = '‚ÇΩ'
                    payment_type = "–¥–µ–Ω—å–≥–∏"

                try:
                    seller_notification = f"""‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–ª {payment_type} –≥–∞—Ä–∞–Ω—Ç—É!

üí∞ –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{buyer_payment_method}`
üõ°Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ ({deal['amount']} {currency_symbol}) –Ω–∞—Ö–æ–¥—è—Ç—Å—è —É –≥–∞—Ä–∞–Ω—Ç–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üì¶ **–í–ê–® –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {deal['description']}

üíµ **–ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–ù–ï–ì:**
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≥–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç {deal['amount']} {currency_symbol} –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: `{seller_payment_method or '–ù–ï –£–ö–ê–ó–ê–ù–´'}`

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞."""

                    keyboard = [[InlineKeyboardButton('üì¶ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä', callback_data=f'seller_sent_{deal_id}')]]
                    await context.bot.send_message(
                        chat_id=seller_id,
                        text=seller_notification,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}')
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø—Ä–æ–≤–µ—Ä—è–µ–º"
                deal['status'] = 'waiting_confirmation'
                self.deals[deal_id] = deal
                self.save_deals_data()

                card = self.get_deal_card(deal, user_id)
                await self.safe_edit_message(query, card, parse_mode=ParseMode.MARKDOWN)
            return

        # –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞–∂–∞–ª "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä"
        if data.startswith('seller_sent_'):
            deal_id = data[len('seller_sent_'):]
            deal = self.get_deal(deal_id)
            if not deal or str(user_id) != str(deal.get('user_id')):
                await self.safe_edit_message(query, '‚ùå –û—à–∏–±–∫–∞. –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞.')
                return

            deal['status'] = 'finished'
            self.deals[deal_id] = deal
            self.save_deals_data()

            # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            buyer_id = deal.get('buyer_id')
            if buyer_id:
                try:
                    await context.bot.send_message(
                        chat_id=buyer_id,
                        text=f'‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal["id"][:8]}!\n\nüéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É.\nüíº –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ELF OTC!'
                    )
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}')

            card = self.get_deal_card(deal, user_id)
            await self.safe_edit_message(query, card, parse_mode=ParseMode.MARKDOWN)
            return

        # –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
        if data.startswith('cancel_deal_'):
            deal_id = data[len('cancel_deal_'):]
            deal = self.get_deal(deal_id)
            if not deal:
                await self.safe_edit_message(query, '‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
            if str(user_id) not in [str(deal['user_id']), str(deal.get('buyer_id', ''))]:
                await self.safe_edit_message(query, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.')
                return

            # –£–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∫—É
            del self.deals[deal_id]
            self.save_deals_data()

            await self.safe_edit_message(query, f'‚ùå –°–¥–µ–ª–∫–∞ #{deal_id[:8]} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            return

    async def text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text.strip()
        lang = self.get_user_language(user_id)
        texts = TEXTS[lang]
        state = self.user_states.get(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç TON-–∫–æ—à–µ–ª–µ–∫
        if state == 'waiting_ton_wallet':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è TON-–∞–¥—Ä–µ—Å–∞ (–ø—Ä–∏–º–µ—Ä: 48 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _ –∏ -)
            if re.fullmatch(r'[A-Za-z0-9_-]{48,64}', text):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                self.set_user_wallet(user_id, text)
                self.user_states[user_id] = None
                confirm_text = f"‚úÖ TON-–∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüíé –í–∞—à –∫–æ—à–µ–ª–µ–∫:\n`{text}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–¥–µ–ª–∫–∞—Ö —Å TON."
                keyboard = [
                    [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
                ]
                try:
                    if os.path.exists(START_IMAGE_PATH):
                        with open(START_IMAGE_PATH, 'rb') as photo:
                            await update.message.reply_photo(
                                photo=photo,
                                caption=confirm_text,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=InlineKeyboardMarkup(keyboard)
                            )
                    else:
                        await update.message.reply_text(
                            confirm_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                except Exception as e:
                    logger.error(f"Error in confirm TON wallet: {e}")
            else:
                error_text = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TON-–∫–æ—à–µ–ª—å–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:\n`UQAg5524ZdXGirNT79n4eaFiuiSzv1VivKnpVYDI6za0J_hz`'
                keyboard = [
                    [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
                ]
                await update.message.reply_text(
                    error_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É
        if state == 'waiting_bank_card':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
            card_digits = re.sub(r'[^\d]', '', text)
            if len(card_digits) == 16:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                formatted_card = f"{card_digits[:4]} {card_digits[4:8]} {card_digits[8:12]} {card_digits[12:]}"
                self.set_user_bank_card(user_id, formatted_card)
                self.user_states[user_id] = None
                confirm_text = f"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nüí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞:\n`{formatted_card}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–¥–µ–ª–∫–∞—Ö —Å —Ä—É–±–ª—è–º–∏."
                keyboard = [
                    [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
                ]
                try:
                    if os.path.exists(START_IMAGE_PATH):
                        with open(START_IMAGE_PATH, 'rb') as photo:
                            await update.message.reply_photo(
                                photo=photo,
                                caption=confirm_text,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=InlineKeyboardMarkup(keyboard)
                            )
                    else:
                        await update.message.reply_text(
                            confirm_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                except Exception as e:
                    logger.error(f"Error in confirm bank card: {e}")
            else:
                error_text = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã! –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä.\n\n–ü—Ä–∏–º–µ—Ä: 2200 7000 0000 0000'
                keyboard = [
                    [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
                ]
                await update.message.reply_text(
                    error_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            return

        # –®–∞–≥ 1: –í–≤–æ–¥ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã)
        if isinstance(state, dict) and state.get('waiting_deal_amount'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.5)
            if re.fullmatch(r'\d+(\.\d{1,2})?', text):
                currency = state['currency']
                currency_symbol = 'TON' if currency == 'TON' else '‚ÇΩ'

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                self.user_states[user_id] = {'deal_amount': text, 'currency': currency}
                ask_desc = f'üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {text} {currency_symbol}:\n\nüí° –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:\n‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç {text} {currency_symbol} –≥–∞—Ä–∞–Ω—Ç—É\n‚Ä¢ –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç {text} {currency_symbol} –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n–ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è: 10 –ö–µ–ø–æ–∫ –∏ –ü–µ–ø–µ'
                await update.message.reply_text(ask_desc)
            else:
                await update.message.reply_text('‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100.5')
            return

        # –®–∞–≥ 2: –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã)
        if isinstance(state, dict) and 'deal_amount' in state and 'currency' in state:
            amount = state['deal_amount']
            currency = state['currency']
            description = text

            # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            deal_id = self.create_deal(user_id, amount, description, currency)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            link = f'https://t.me/{context.bot.username}?start=deal_{deal_id}'
            currency_symbol = 'TON' if currency == 'TON' else '‚ÇΩ'
            deal_info = (
                '‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n'
                f'üí∞ –°—É–º–º–∞: {amount} {currency_symbol}\n'
                f'üí± –í–∞–ª—é—Ç–∞: {currency}\n'
                f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n'
                f'üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n{link}\n\n'
                f'üíº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏!'
            )
            keyboard = [
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'cancel_deal_{deal_id}')],
                [InlineKeyboardButton(texts['back_to_menu'], callback_data='back_to_menu')]
            ]
            await update.message.reply_text(deal_info, reply_markup=InlineKeyboardMarkup(keyboard))
            self.user_states[user_id] = None
            return

    def load_deals_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(DEALS_DATA_FILE):
                with open(DEALS_DATA_FILE, 'r', encoding='utf-8') as file:
                    self.deals = json.load(file)
            else:
                self.deals = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫: {e}")
            self.deals = {}

    def save_deals_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(DEALS_DATA_FILE, 'w', encoding='utf-8') as file:
                json.dump(self.deals, file, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")

    def create_deal(self, user_id, amount, description, currency='TON'):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å –µ—ë ID"""
        deal_id = str(uuid.uuid4())
        deal = {
            'id': deal_id,
            'user_id': str(user_id),
            'amount': amount,
            'description': description,
            'currency': currency,
            'status': 'active',
            'buyer_id': None,  # ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—à–µ–ª –≤ —Å–¥–µ–ª–∫—É
        }
        self.deals[deal_id] = deal
        self.save_deals_data()
        return deal_id

    def get_deal(self, deal_id):
        return self.deals.get(deal_id)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ELFOTCBot()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.text_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ ELF OTC –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üõ°Ô∏è –ö–æ—à–µ–ª–µ–∫ –≥–∞—Ä–∞–Ω—Ç–∞ (TON): {GUARANTOR_WALLET}")
    print(f"üõ°Ô∏è –ö–∞—Ä—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∞ (RUB): {GUARANTOR_BANK_CARD}")
    print(f"üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(PRIVILEGED_USERS)}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
